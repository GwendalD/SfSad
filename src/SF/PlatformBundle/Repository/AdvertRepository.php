<?php

namespace SF\PlatformBundle\Repository;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;

class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

	public function getAdvert($id)
	{
		// Pour obtenir une entitée il faut mapper l'array que l'on obtiendra avec la classe de l'entité
		$sql="
			SELECT a.id
			     , a.title
			     , a.author
			     , a.content
			     , a.published
			     , a.updated_at
			     , a.nb_applications
			     , a.slug
			     , a.user_id
			     , a.image_id
			     , img.url as img_url
			     , img.alt as img_alt
			     , app.id as app_id
			     , GROUP_CONCAT(c.name ORDER by c.id) AS categories_name
			     
			  FROM advert a 
			  LEFT JOIN advert_category ac ON a.id = ac.advert_id 	
			  LEFT JOIN category c ON c.id = ac.category_id 
			  LEFT JOIN application app ON a.id = app.advert_id
			  LEFT JOIN image img ON a.image_id = img.id
			  WHERE a.id = $id
			 GROUP BY a.id, a.title, app_id";


	    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    	$stmt->execute([]);

    	return $stmt->fetchAll();
	}

	public function getAdvertsBefore(\Datetime $date)
	{
	return $this->createQueryBuilder('a')
	  ->where('a.updatedAt <= :date')                      // Date de modification antérieure à :date
	  ->orWhere('a.updatedAt IS NULL AND a.date <= :date') // Si la date de modification est vide, on vérifie la date de création
	  ->andWhere('a.applications IS EMPTY')                // On vérifie que l'annonce ne contient aucune candidature
	  ->setParameter('date', $date)
	  ->getQuery()
	  ->getResult()
	  ;
	}
  
	// This will return a QueryBuilder instance
    public function findAllPagination()
    {
        return $this->createQueryBuilder("a");
    }

	public function getAdverts($page, $nbPerPage)
	{
		$query = $this->createQueryBuilder('a')
		  ->leftJoin('a.image', 'i')
		  ->addSelect('i')
		  ->leftJoin('a.categories', 'c')
		  ->addSelect('c')
		  ->orderBy('a.date', 'DESC')
		  ->getQuery()
		;

		$query
		  // On définit l'annonce à partir de laquelle commencer la liste
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;

		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($query, true);
	}

	public function whereCurrentYear(QueryBuilder $qb)
	{

		$qb

		  ->andWhere('a.date BETWEEN :start AND :end')

		  ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année

		  ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 décembre de cette année

		;

	}

	public function getLastAdvertMenu($limit)
	{
		$qb = $this
		->createQueryBuilder('a')
		->select('a.id, a.title')
		->orderBy('a.date', 'DESC')
		->setMaxResults($limit);

		return $qb
		->getQuery()
		->getArrayResult()
		;
	}

	public function getAdvertCurrentYear()
	{
		$qb = $this->createQueryBuilder('a');

		// // On peut ajouter ce qu'on veut avant
		// $qb
		// ->where('a.author = :author')
		// ->setParameter('author', 'Marine')
		// ;

		// On applique notre condition sur le QueryBuilder
		$this->whereCurrentYear($qb);

		// On peut ajouter ce qu'on veut après
		$qb->orderBy('a.date', 'DESC');


		return $qb
		->getQuery()
		->getResult()
		;
	}


	public function getAdvertWithApplications()
	{
		$qb = $this
		->createQueryBuilder('a')
		->leftJoin('a.applications', 'app')
		->addSelect('app')
		;

		return $qb
		->getQuery()
		->getResult()
		;
	}


	public function getAdvertWithCategories(array $categoryNames)
	{

		$qb = $this
		->createQueryBuilder('a')
		->innerJoin('a.categories', 'cat')
		->addSelect('cat')
		;

		$qb->where($qb->expr()->in('cat.name', $categoryNames));

		return $qb
		->getQuery()
		->getResult()
		;

	}
}
